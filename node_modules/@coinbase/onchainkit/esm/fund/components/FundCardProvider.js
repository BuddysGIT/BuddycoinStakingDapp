function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
import { createContext, useState, useCallback, useEffect, useContext } from 'react';
import { useValue } from '../../internal/hooks/useValue.js';
import { useEmitLifecycleStatus } from '../hooks/useEmitLifecycleStatus.js';
import { usePaymentMethods } from '../hooks/usePaymentMethods.js';
import { fetchOnrampQuote } from '../utils/fetchOnrampQuote.js';
import { jsx } from 'react/jsx-runtime';
const FundContext = /*#__PURE__*/createContext(undefined);
function FundCardProvider({
  children,
  asset,
  currency = 'USD',
  headerText = `Buy ${asset.toUpperCase()}`,
  buttonText,
  country,
  subdivision,
  inputType,
  onError,
  onStatus,
  onSuccess,
  presetAmountInputs
}) {
  const _useState = useState(),
    _useState2 = _slicedToArray(_useState, 2),
    selectedPaymentMethod = _useState2[0],
    setSelectedPaymentMethod = _useState2[1];
  const _useState3 = useState(inputType || 'fiat'),
    _useState4 = _slicedToArray(_useState3, 2),
    selectedInputType = _useState4[0],
    setSelectedInputType = _useState4[1];
  const _useState5 = useState(''),
    _useState6 = _slicedToArray(_useState5, 2),
    fundAmountFiat = _useState6[0],
    setFundAmountFiat = _useState6[1];
  const _useState7 = useState(''),
    _useState8 = _slicedToArray(_useState7, 2),
    fundAmountCrypto = _useState8[0],
    setFundAmountCrypto = _useState8[1];
  const _useState9 = useState(0),
    _useState10 = _slicedToArray(_useState9, 2),
    exchangeRate = _useState10[0],
    setExchangeRate = _useState10[1];
  const _useState11 = useState(true),
    _useState12 = _slicedToArray(_useState11, 2),
    exchangeRateLoading = _useState12[0],
    setExchangeRateLoading = _useState12[1];
  const _useState13 = useState('default'),
    _useState14 = _slicedToArray(_useState13, 2),
    submitButtonState = _useState14[0],
    setSubmitButtonState = _useState14[1];
  const _useState15 = useState([]),
    _useState16 = _slicedToArray(_useState15, 2),
    paymentMethods = _useState16[0],
    setPaymentMethods = _useState16[1];
  const _useState17 = useState(true),
    _useState18 = _slicedToArray(_useState17, 2),
    isPaymentMethodsLoading = _useState18[0],
    setIsPaymentMethodsLoading = _useState18[1];
  const _useEmitLifecycleStat = useEmitLifecycleStatus({
      onError,
      onSuccess,
      onStatus
    }),
    lifecycleStatus = _useEmitLifecycleStat.lifecycleStatus,
    updateLifecycleStatus = _useEmitLifecycleStat.updateLifecycleStatus;
  const fetchExchangeRate = useCallback(async () => {
    setExchangeRateLoading(true);
    try {
      const quote = await fetchOnrampQuote({
        purchaseCurrency: asset,
        paymentCurrency: currency,
        paymentAmount: '100',
        paymentMethod: 'CARD',
        country,
        subdivision
      });
      setExchangeRate(Number(quote.purchaseAmount.value) / Number(quote.paymentSubtotal.value));
    } catch (err) {
      if (err instanceof Error) {
        console.error('Error fetching exchange rate:', err);
        onError?.({
          errorType: 'handled_error',
          code: 'EXCHANGE_RATE_ERROR',
          debugMessage: err.message
        });
      }
    } finally {
      setExchangeRateLoading(false);
    }
  }, [asset, country, subdivision, currency, onError]);

  // biome-ignore lint/correctness/useExhaustiveDependencies: One time effect
  useEffect(() => {
    fetchExchangeRate();
  }, []);

  // Fetches and sets the payment methods to the context
  usePaymentMethods({
    country,
    subdivision,
    currency,
    setPaymentMethods,
    setIsPaymentMethodsLoading,
    onError
  });
  const value = useValue({
    asset,
    currency,
    selectedPaymentMethod,
    setSelectedPaymentMethod,
    fundAmountFiat,
    setFundAmountFiat,
    fundAmountCrypto,
    setFundAmountCrypto,
    selectedInputType,
    setSelectedInputType,
    exchangeRate,
    setExchangeRate,
    exchangeRateLoading,
    setExchangeRateLoading,
    submitButtonState,
    setSubmitButtonState,
    paymentMethods,
    setPaymentMethods,
    isPaymentMethodsLoading,
    setIsPaymentMethodsLoading,
    headerText,
    buttonText,
    country,
    subdivision,
    lifecycleStatus,
    updateLifecycleStatus,
    presetAmountInputs
  });
  return /*#__PURE__*/jsx(FundContext.Provider, {
    value: value,
    children: children
  });
}
function useFundContext() {
  const context = useContext(FundContext);
  if (!context) {
    throw new Error('useFundContext must be used within a FundCardProvider');
  }
  return context;
}
export { FundCardProvider, useFundContext };
//# sourceMappingURL=FundCardProvider.js.map
