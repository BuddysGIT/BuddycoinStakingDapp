import { TextInput } from '../../internal/components/TextInput.js';
import { useAmountInput } from '../../internal/hooks/useAmountInput.js';
import { isValidAmount } from '../../internal/utils/isValidAmount.js';
import { useRef, useCallback, useEffect } from 'react';
import { cn, text } from '../../styles/theme.js';
import { useInputResize } from '../hooks/useInputResize.js';
import { FundCardCurrencyLabel } from './FundCardCurrencyLabel.js';
import { useFundContext } from './FundCardProvider.js';
import { jsxs, jsx } from 'react/jsx-runtime';
const FundCardAmountInput = ({
  className
}) => {
  const _useFundContext = useFundContext(),
    fundAmountFiat = _useFundContext.fundAmountFiat,
    fundAmountCrypto = _useFundContext.fundAmountCrypto,
    asset = _useFundContext.asset,
    selectedInputType = _useFundContext.selectedInputType,
    currency = _useFundContext.currency,
    exchangeRate = _useFundContext.exchangeRate,
    setFundAmountFiat = _useFundContext.setFundAmountFiat,
    setFundAmountCrypto = _useFundContext.setFundAmountCrypto;
  const currencyOrAsset = selectedInputType === 'fiat' ? currency : asset;
  const containerRef = useRef(null);
  const inputRef = useRef(null);
  const hiddenSpanRef = useRef(null);
  const currencySpanRef = useRef(null);
  const value = selectedInputType === 'fiat' ? fundAmountFiat : fundAmountCrypto;
  const updateInputWidth = useInputResize(containerRef, inputRef, hiddenSpanRef, currencySpanRef);
  const _useAmountInput = useAmountInput({
      setFiatAmount: setFundAmountFiat,
      setCryptoAmount: setFundAmountCrypto,
      selectedInputType,
      exchangeRate: String(exchangeRate)
    }),
    handleChange = _useAmountInput.handleChange;
  const handleAmountChange = useCallback(value => {
    handleChange(value, () => {
      if (inputRef.current) {
        inputRef.current.focus();
      }
    });
  }, [handleChange]);

  // biome-ignore lint/correctness/useExhaustiveDependencies: When value changes, we want to update the input width
  useEffect(() => {
    updateInputWidth();
  }, [value, updateInputWidth]);
  const selectedInputTypeRef = useRef(selectedInputType);
  useEffect(() => {
    /**
     * We need to focus the input when the input type changes
     * but not on the initial render.
     */
    if (selectedInputTypeRef.current !== selectedInputType) {
      selectedInputTypeRef.current = selectedInputType;
      handleFocusInput();
    }
  }, [selectedInputType]);
  const handleFocusInput = () => {
    if (inputRef.current) {
      inputRef.current.focus();
    }
  };
  return /*#__PURE__*/jsxs("div", {
    ref: containerRef,
    "data-testid": "ockFundCardAmountInputContainer",
    className: cn('flex cursor-text pt-6 pb-4', className),
    children: [/*#__PURE__*/jsxs("div", {
      className: "flex h-14",
      children: [/*#__PURE__*/jsx(TextInput, {
        className: cn(text.body, 'border-none bg-transparent', 'text-6xl leading-none outline-none', '[appearance:textfield]', '[&::-webkit-inner-spin-button]:m-0 [&::-webkit-inner-spin-button]:appearance-none', '[&::-webkit-outer-spin-button]:m-0 [&::-webkit-outer-spin-button]:appearance-none'),
        value: value,
        onChange: handleAmountChange,
        inputValidator: isValidAmount,
        ref: inputRef,
        inputMode: "decimal",
        placeholder: "0"
      }), /*#__PURE__*/jsx(FundCardCurrencyLabel, {
        ref: currencySpanRef,
        label: currencyOrAsset
      })]
    }), /*#__PURE__*/jsx("span", {
      "data-testid": "ockHiddenSpan",
      ref: hiddenSpanRef,
      className: cn(text.body, 'border-none bg-transparent', 'text-6xl leading-none outline-none', 'pointer-events-none absolute whitespace-nowrap opacity-0', 'left-[-9999px]' // Hide the span from the DOM
      ),
      children: value ? `${value}.` : '0.'
    })]
  });
};
export { FundCardAmountInput, FundCardAmountInput as default };
//# sourceMappingURL=FundCardAmountInput.js.map
