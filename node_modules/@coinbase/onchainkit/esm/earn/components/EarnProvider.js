function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
import { useValue } from '../../internal/hooks/useValue.js';
import { usdcToken } from '../../token/constants.js';
import { useGetTokenBalance } from '../../wallet/hooks/useGetTokenBalance.js';
import { createContext, useState, useContext } from 'react';
import { useAccount } from 'wagmi';
import { jsx } from 'react/jsx-runtime';
const EarnContext = /*#__PURE__*/createContext(undefined);
function EarnProvider({
  vaultAddress,
  children
}) {
  const _useAccount = useAccount(),
    address = _useAccount.address;
  const _useState = useState(''),
    _useState2 = _slicedToArray(_useState, 2),
    depositAmount = _useState2[0],
    setDepositAmount = _useState2[1];
  const _useState3 = useState(''),
    _useState4 = _slicedToArray(_useState3, 2),
    withdrawAmount = _useState4[0],
    setWithdrawAmount = _useState4[1];
  const _useGetTokenBalance = useGetTokenBalance(address, usdcToken),
    convertedBalance = _useGetTokenBalance.convertedBalance;
  const value = useValue({
    convertedBalance,
    vaultAddress,
    depositAmount,
    setDepositAmount,
    withdrawAmount,
    setWithdrawAmount,
    // TODO: update when we have logic to fetch deposited amount
    depositedAmount: '',
    // TODO: update when we have logic to fetch apy
    apy: '',
    // TODO: update when we have logic to fetch interest
    interest: '',
    withdrawCalls: [],
    depositCalls: []
  });
  return /*#__PURE__*/jsx(EarnContext.Provider, {
    value: value,
    children: children
  });
}
function useEarnContext() {
  const context = useContext(EarnContext);
  if (!context) {
    throw new Error('useEarnContext must be used within an EarnProvider');
  }
  return context;
}
export { EarnProvider, useEarnContext };
//# sourceMappingURL=EarnProvider.js.map
