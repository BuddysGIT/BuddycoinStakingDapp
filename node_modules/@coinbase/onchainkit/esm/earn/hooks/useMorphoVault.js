import { MORPHO_VAULT_ABI } from '../abis/morpho.js';
import { MORPHO_TOKEN_BASE_ADDRESS } from '../constants.js';
import calculateMorphoRewards from '../utils/calculateMorphoRewards.js';
import { fetchMorphoApy } from '../utils/fetchMorphoApy.js';
import { useQuery } from '@tanstack/react-query';
import { erc20Abi, formatUnits } from 'viem';
import { useReadContracts, useReadContract } from 'wagmi';
function useMorphoVault({
  vaultAddress,
  address
}) {
  const _useReadContracts = useReadContracts({
      contracts: [{
        abi: MORPHO_VAULT_ABI,
        address: vaultAddress,
        functionName: 'asset'
      }, {
        abi: MORPHO_VAULT_ABI,
        address: vaultAddress,
        functionName: 'name'
      }, {
        abi: MORPHO_VAULT_ABI,
        address: vaultAddress,
        functionName: 'balanceOf',
        args: [address]
      }, {
        abi: MORPHO_VAULT_ABI,
        address: vaultAddress,
        functionName: 'decimals'
      }]
    }),
    data = _useReadContracts.data,
    status = _useReadContracts.status;
  const _useReadContract = useReadContract({
      abi: erc20Abi,
      address: data?.[0].result,
      functionName: 'decimals',
      query: {
        enabled: !!data?.[0].result
      }
    }),
    tokenDecimals = _useReadContract.data;
  const _useQuery = useQuery({
      queryKey: ['morpho-apy', vaultAddress],
      queryFn: () => fetchMorphoApy(vaultAddress)
    }),
    vaultData = _useQuery.data;
  const morphoApr = vaultData?.state ? calculateMorphoRewards(vaultData?.state) : 0;
  const formattedBalance = data?.[2].result && data?.[3].result ? formatUnits(data?.[2].result, data?.[3].result) : undefined;
  return {
    status,
    asset: data?.[0].result,
    assetDecimals: tokenDecimals,
    vaultDecimals: data?.[3].result,
    name: data?.[1].result,
    balance: formattedBalance,
    totalApy: vaultData?.state?.netApy,
    nativeApy: vaultData?.state?.netApyWithoutRewards,
    rewards: [{
      asset: MORPHO_TOKEN_BASE_ADDRESS,
      assetName: 'Morpho',
      apy: morphoApr
    }, ...(vaultData?.state?.rewards.map(reward => ({
      asset: reward.asset.address,
      assetName: reward.asset.name,
      apy: reward.supplyApr
    })) || [])]
  };
}
export { useMorphoVault };
//# sourceMappingURL=useMorphoVault.js.map
