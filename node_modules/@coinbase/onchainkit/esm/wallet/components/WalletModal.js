'use client';
import { Dialog } from '../../internal/components/primitives/Dialog.js';
import { CloseSvg } from '../../internal/svg/closeSvg.js';
import { coinbaseWalletSvg } from '../../internal/svg/coinbaseWalletSvg.js';
import { defaultAvatarSVG } from '../../internal/svg/defaultAvatarSVG.js';
import { metamaskSvg } from '../../internal/svg/metamaskSvg.js';
import { phantomSvg } from '../../internal/svg/phantomSvg.js';
import { cn, border, background, pressable, text, color } from '../../styles/theme.js';
import { useOnchainKit } from '../../useOnchainKit.js';
import { useCallback } from 'react';
import { useConnect } from 'wagmi';
import { coinbaseWallet, metaMask, injected } from 'wagmi/connectors';
import { jsx, jsxs } from 'react/jsx-runtime';
// biome-ignore lint/complexity/noExcessiveCognitiveComplexity: ignore
function WalletModal({
  className,
  isOpen,
  onClose,
  onError
}) {
  const _useConnect = useConnect(),
    connect = _useConnect.connect;
  const _useOnchainKit = useOnchainKit(),
    config = _useOnchainKit.config;
  const appLogo = config?.appearance?.logo ?? undefined;
  const appName = config?.appearance?.name ?? undefined;
  const privacyPolicyUrl = config?.wallet?.privacyUrl ?? undefined;
  const termsOfServiceUrl = config?.wallet?.termsUrl ?? undefined;
  const handleCoinbaseWalletConnection = useCallback(() => {
    try {
      const cbConnector = coinbaseWallet({
        preference: 'all',
        appName,
        appLogoUrl: appLogo
      });
      connect({
        connector: cbConnector
      });
      onClose();
    } catch (error) {
      console.error('Coinbase Wallet connection error:', error);
      if (onError) {
        onError(error instanceof Error ? error : new Error('Failed to connect wallet'));
      }
    }
  }, [appName, appLogo, connect, onClose, onError]);
  const handleMetaMaskConnection = useCallback(() => {
    try {
      const metamaskConnector = metaMask({
        dappMetadata: {
          name: appName || 'OnchainKit App',
          url: window.location.origin,
          iconUrl: appLogo
        }
      });
      connect({
        connector: metamaskConnector
      });
      onClose();
    } catch (error) {
      console.error('MetaMask connection error:', error);
      onError?.(error instanceof Error ? error : new Error('Failed to connect wallet'));
    }
  }, [connect, onClose, onError, appName, appLogo]);
  const handlePhantomConnection = useCallback(() => {
    try {
      const phantomConnector = injected({
        target: 'phantom'
      });
      connect({
        connector: phantomConnector
      });
      onClose();
    } catch (error) {
      console.error('Phantom connection error:', error);
      onError?.(error instanceof Error ? error : new Error('Failed to connect wallet'));
    }
  }, [connect, onClose, onError]);
  return /*#__PURE__*/jsx(Dialog, {
    isOpen: isOpen,
    onClose: onClose,
    "aria-label": "Connect Wallet",
    children: /*#__PURE__*/jsxs("div", {
      "data-testid": "ockModalOverlay",
      className: cn(border.lineDefault, border.radius, background.default, 'w-[22rem] p-6 pb-4', 'relative flex flex-col items-center gap-4', className),
      children: [/*#__PURE__*/jsx("button", {
        type: "button",
        onClick: onClose,
        className: cn(pressable.default, border.radius, border.default, 'absolute top-4 right-4', 'flex items-center justify-center p-1', 'bg-current', 'transition-colors duration-200'),
        "aria-label": "Close modal",
        children: /*#__PURE__*/jsx("div", {
          className: cn('flex h-4 w-4 items-center justify-center'),
          children: /*#__PURE__*/jsx(CloseSvg, {})
        })
      }), (appLogo || appName) && /*#__PURE__*/jsxs("div", {
        className: "flex w-full flex-col items-center gap-2 py-3",
        children: [appLogo && /*#__PURE__*/jsx("div", {
          className: cn(border.radius, 'h-14 w-14 overflow-hidden'),
          children: /*#__PURE__*/jsx("img", {
            src: appLogo,
            alt: `${appName || 'App'} icon`,
            className: "h-full w-full object-cover"
          })
        }), appName && /*#__PURE__*/jsx("h2", {
          className: cn(text.headline, color.foreground, 'text-center'),
          children: appName
        })]
      }), /*#__PURE__*/jsxs("div", {
        className: "flex w-full flex-col gap-3",
        children: [/*#__PURE__*/jsxs("button", {
          type: "button",
          onClick: handleCoinbaseWalletConnection,
          className: cn(border.radius, text.body, pressable.alternate, color.foreground, 'flex items-center justify-between px-4 py-3 text-left'),
          children: ["Sign up", /*#__PURE__*/jsx("div", {
            className: "h-4 w-4",
            children: defaultAvatarSVG
          })]
        }), /*#__PURE__*/jsxs("div", {
          className: "relative",
          children: [/*#__PURE__*/jsx("div", {
            className: "absolute inset-0 flex items-center",
            children: /*#__PURE__*/jsx("div", {
              className: cn(border.lineDefault, 'w-full border-[0.5px]')
            })
          }), /*#__PURE__*/jsx("div", {
            className: "relative flex justify-center",
            children: /*#__PURE__*/jsx("span", {
              className: cn(background.default, color.foregroundMuted, text.legal, 'px-2'),
              children: "or continue with an existing wallet"
            })
          })]
        }), /*#__PURE__*/jsxs("button", {
          type: "button",
          onClick: handleCoinbaseWalletConnection,
          className: cn(border.radius, background.default, text.body, pressable.alternate, color.foreground, 'px-4 py-3', 'flex items-center justify-between text-left'),
          children: ["Coinbase Wallet", /*#__PURE__*/jsx("div", {
            className: "h-4 w-4",
            children: coinbaseWalletSvg
          })]
        }), /*#__PURE__*/jsxs("button", {
          type: "button",
          onClick: handleMetaMaskConnection,
          className: cn(border.radius, background.default, text.body, pressable.alternate, color.foreground, 'flex items-center justify-between px-4 py-3 text-left'),
          children: ["MetaMask", /*#__PURE__*/jsx("div", {
            className: "-mr-0.5 flex h-5 w-5 items-center justify-center",
            children: metamaskSvg
          })]
        }), /*#__PURE__*/jsxs("button", {
          type: "button",
          onClick: handlePhantomConnection,
          className: cn(border.radius, background.default, text.body, pressable.alternate, color.foreground, 'flex items-center justify-between px-4 py-3 text-left'),
          children: ["Phantom", /*#__PURE__*/jsx("div", {
            className: "-mr-0.5 flex h-4 w-4 items-center justify-center",
            children: phantomSvg
          })]
        })]
      }), /*#__PURE__*/jsxs("div", {
        className: cn(color.foregroundMuted, text.legal, 'flex flex-col items-center justify-center gap-1 px-4', 'mt-4 text-center'),
        children: [/*#__PURE__*/jsx("span", {
          className: "font-normal text-[10px] leading-[13px]",
          children: "By connecting a wallet, you agree to our"
        }), /*#__PURE__*/jsxs("span", {
          className: "font-normal text-[10px] leading-[13px]",
          children: [termsOfServiceUrl && /*#__PURE__*/jsx("a", {
            href: termsOfServiceUrl,
            className: cn(color.primary, 'hover:underline'),
            target: "_blank",
            rel: "noopener noreferrer",
            tabIndex: 0,
            children: "Terms of Service"
          }), ' ', termsOfServiceUrl && privacyPolicyUrl && 'and', ' ', privacyPolicyUrl && /*#__PURE__*/jsx("a", {
            href: privacyPolicyUrl,
            className: cn(color.primary, 'hover:underline'),
            target: "_blank",
            rel: "noopener noreferrer",
            tabIndex: 0,
            children: "Privacy Policy"
          }), "."]
        })]
      })]
    })
  });
}
export { WalletModal };
//# sourceMappingURL=WalletModal.js.map
