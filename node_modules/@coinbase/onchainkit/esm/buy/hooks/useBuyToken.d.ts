/// <reference types="react" />
import type { Address } from 'viem';
import type { Token } from '../../token';
export declare const useBuyToken: (toToken: Token, token: Token | undefined, address: Address | undefined) => {
    balance: string | undefined;
    balanceResponse: {
        data: {
            decimals: number;
            formatted: string;
            symbol: string;
            value: bigint;
        };
        error: import("viem").GetBalanceErrorType;
        isError: true;
        isPending: false;
        isLoading: false;
        isLoadingError: false;
        isRefetchError: true;
        isSuccess: false;
        status: "error";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        failureReason: import("viem").GetBalanceErrorType | null;
        errorUpdateCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isInitialLoading: boolean;
        isPaused: boolean;
        isPlaceholderData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: (options?: import("@tanstack/query-core/build/legacy/hydration-DpBMnFDT").aj | undefined) => Promise<import("@tanstack/query-core/build/legacy/hydration-DpBMnFDT").az<{
            decimals: number;
            formatted: string;
            symbol: string;
            value: bigint;
        }, import("viem").GetBalanceErrorType>>;
        fetchStatus: import("@tanstack/query-core/build/legacy/hydration-DpBMnFDT").ar;
        promise: Promise<{
            decimals: number;
            formatted: string;
            symbol: string;
            value: bigint;
        }>;
        queryKey: readonly unknown[];
    } | {
        data: {
            decimals: number;
            formatted: string;
            symbol: string;
            value: bigint;
        };
        error: null;
        isError: false;
        isPending: false;
        isLoading: false;
        isLoadingError: false;
        isRefetchError: false;
        isSuccess: true;
        status: "success";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        failureReason: import("viem").GetBalanceErrorType | null;
        errorUpdateCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isInitialLoading: boolean;
        isPaused: boolean;
        isPlaceholderData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: (options?: import("@tanstack/query-core/build/legacy/hydration-DpBMnFDT").aj | undefined) => Promise<import("@tanstack/query-core/build/legacy/hydration-DpBMnFDT").az<{
            decimals: number;
            formatted: string;
            symbol: string;
            value: bigint;
        }, import("viem").GetBalanceErrorType>>;
        fetchStatus: import("@tanstack/query-core/build/legacy/hydration-DpBMnFDT").ar;
        promise: Promise<{
            decimals: number;
            formatted: string;
            symbol: string;
            value: bigint;
        }>;
        queryKey: readonly unknown[];
    } | {
        data: undefined;
        error: import("viem").GetBalanceErrorType;
        isError: true;
        isPending: false;
        isLoading: false;
        isLoadingError: true;
        isRefetchError: false;
        isSuccess: false;
        status: "error";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        failureReason: import("viem").GetBalanceErrorType | null;
        errorUpdateCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isInitialLoading: boolean;
        isPaused: boolean;
        isPlaceholderData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: (options?: import("@tanstack/query-core/build/legacy/hydration-DpBMnFDT").aj | undefined) => Promise<import("@tanstack/query-core/build/legacy/hydration-DpBMnFDT").az<{
            decimals: number;
            formatted: string;
            symbol: string;
            value: bigint;
        }, import("viem").GetBalanceErrorType>>;
        fetchStatus: import("@tanstack/query-core/build/legacy/hydration-DpBMnFDT").ar;
        promise: Promise<{
            decimals: number;
            formatted: string;
            symbol: string;
            value: bigint;
        }>;
        queryKey: readonly unknown[];
    } | {
        data: undefined;
        error: null;
        isError: false;
        isPending: true;
        isLoadingError: false;
        isRefetchError: false;
        isSuccess: false;
        status: "pending";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        failureReason: import("viem").GetBalanceErrorType | null;
        errorUpdateCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isLoading: boolean;
        isInitialLoading: boolean;
        isPaused: boolean;
        isPlaceholderData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: (options?: import("@tanstack/query-core/build/legacy/hydration-DpBMnFDT").aj | undefined) => Promise<import("@tanstack/query-core/build/legacy/hydration-DpBMnFDT").az<{
            decimals: number;
            formatted: string;
            symbol: string;
            value: bigint;
        }, import("viem").GetBalanceErrorType>>;
        fetchStatus: import("@tanstack/query-core/build/legacy/hydration-DpBMnFDT").ar;
        promise: Promise<{
            decimals: number;
            formatted: string;
            symbol: string;
            value: bigint;
        }>;
        queryKey: readonly unknown[];
    } | {
        data: unknown;
        error: import("viem").ReadContractErrorType;
        isError: true;
        isPending: false;
        isLoading: false;
        isLoadingError: false;
        isRefetchError: true;
        isSuccess: false;
        status: "error";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        failureReason: import("viem").ReadContractErrorType | null;
        errorUpdateCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isInitialLoading: boolean;
        isPaused: boolean;
        isPlaceholderData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: (options?: import("@tanstack/query-core/build/legacy/hydration-DpBMnFDT").aj | undefined) => Promise<import("@tanstack/query-core/build/legacy/hydration-DpBMnFDT").az<unknown, import("viem").ReadContractErrorType>>;
        fetchStatus: import("@tanstack/query-core/build/legacy/hydration-DpBMnFDT").ar;
        promise: Promise<unknown>;
        queryKey: readonly unknown[];
    } | {
        data: unknown;
        error: null;
        isError: false;
        isPending: false;
        isLoading: false;
        isLoadingError: false;
        isRefetchError: false;
        isSuccess: true;
        status: "success";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        failureReason: import("viem").ReadContractErrorType | null;
        errorUpdateCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isInitialLoading: boolean;
        isPaused: boolean;
        isPlaceholderData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: (options?: import("@tanstack/query-core/build/legacy/hydration-DpBMnFDT").aj | undefined) => Promise<import("@tanstack/query-core/build/legacy/hydration-DpBMnFDT").az<unknown, import("viem").ReadContractErrorType>>;
        fetchStatus: import("@tanstack/query-core/build/legacy/hydration-DpBMnFDT").ar;
        promise: Promise<unknown>;
        queryKey: readonly unknown[];
    } | {
        data: undefined;
        error: import("viem").ReadContractErrorType;
        isError: true;
        isPending: false;
        isLoading: false;
        isLoadingError: true;
        isRefetchError: false;
        isSuccess: false;
        status: "error";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        failureReason: import("viem").ReadContractErrorType | null;
        errorUpdateCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isInitialLoading: boolean;
        isPaused: boolean;
        isPlaceholderData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: (options?: import("@tanstack/query-core/build/legacy/hydration-DpBMnFDT").aj | undefined) => Promise<import("@tanstack/query-core/build/legacy/hydration-DpBMnFDT").az<unknown, import("viem").ReadContractErrorType>>;
        fetchStatus: import("@tanstack/query-core/build/legacy/hydration-DpBMnFDT").ar;
        promise: Promise<unknown>;
        queryKey: readonly unknown[];
    } | {
        data: undefined;
        error: null;
        isError: false;
        isPending: true;
        isLoadingError: false;
        isRefetchError: false;
        isSuccess: false;
        status: "pending";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        failureReason: import("viem").ReadContractErrorType | null;
        errorUpdateCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isLoading: boolean;
        isInitialLoading: boolean;
        isPaused: boolean;
        isPlaceholderData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: (options?: import("@tanstack/query-core/build/legacy/hydration-DpBMnFDT").aj | undefined) => Promise<import("@tanstack/query-core/build/legacy/hydration-DpBMnFDT").az<unknown, import("viem").ReadContractErrorType>>;
        fetchStatus: import("@tanstack/query-core/build/legacy/hydration-DpBMnFDT").ar;
        promise: Promise<unknown>;
        queryKey: readonly unknown[];
    } | undefined;
    amount: string;
    setAmount: import("react").Dispatch<import("react").SetStateAction<string>>;
    amountUSD: string;
    setAmountUSD: import("react").Dispatch<import("react").SetStateAction<string>>;
    token: Token | undefined;
    loading: boolean;
    setLoading: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    error: import("../../swap").SwapError | undefined;
};
//# sourceMappingURL=useBuyToken.d.ts.map